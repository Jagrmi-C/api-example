// Code generated by mockery v2.43.1. DO NOT EDIT.

package controller_test

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "gitlab.com/jc88/api-example/domain"
)

// MockConfigurationApplier is an autogenerated mock type for the ConfigurationApplier type
type MockConfigurationApplier struct {
	mock.Mock
}

type MockConfigurationApplier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigurationApplier) EXPECT() *MockConfigurationApplier_Expecter {
	return &MockConfigurationApplier_Expecter{mock: &_m.Mock}
}

// ApplyNewRetailerInstruction provides a mock function with given fields: ctx, config, auth0token
func (_m *MockConfigurationApplier) ApplyNewRetailerInstruction(ctx context.Context, config *domain.RetailerConfiguration, auth0token string) error {
	ret := _m.Called(ctx, config, auth0token)

	if len(ret) == 0 {
		panic("no return value specified for ApplyNewRetailerInstruction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RetailerConfiguration, string) error); ok {
		r0 = rf(ctx, config, auth0token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigurationApplier_ApplyNewRetailerInstruction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyNewRetailerInstruction'
type MockConfigurationApplier_ApplyNewRetailerInstruction_Call struct {
	*mock.Call
}

// ApplyNewRetailerInstruction is a helper method to define mock.On call
//   - ctx context.Context
//   - config *domain.RetailerConfiguration
//   - auth0token string
func (_e *MockConfigurationApplier_Expecter) ApplyNewRetailerInstruction(ctx interface{}, config interface{}, auth0token interface{}) *MockConfigurationApplier_ApplyNewRetailerInstruction_Call {
	return &MockConfigurationApplier_ApplyNewRetailerInstruction_Call{Call: _e.mock.On("ApplyNewRetailerInstruction", ctx, config, auth0token)}
}

func (_c *MockConfigurationApplier_ApplyNewRetailerInstruction_Call) Run(run func(ctx context.Context, config *domain.RetailerConfiguration, auth0token string)) *MockConfigurationApplier_ApplyNewRetailerInstruction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.RetailerConfiguration), args[2].(string))
	})
	return _c
}

func (_c *MockConfigurationApplier_ApplyNewRetailerInstruction_Call) Return(_a0 error) *MockConfigurationApplier_ApplyNewRetailerInstruction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigurationApplier_ApplyNewRetailerInstruction_Call) RunAndReturn(run func(context.Context, *domain.RetailerConfiguration, string) error) *MockConfigurationApplier_ApplyNewRetailerInstruction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigurationApplier creates a new instance of MockConfigurationApplier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigurationApplier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigurationApplier {
	mock := &MockConfigurationApplier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
