// Code generated by mockery v2.43.1. DO NOT EDIT.

package usecase_test

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "gitlab.com/jc88/api-example/domain"

	uuid "github.com/satori/go.uuid"
)

// MockRetailerInstructionsManager is an autogenerated mock type for the RetailerInstructionsManager type
type MockRetailerInstructionsManager struct {
	mock.Mock
}

type MockRetailerInstructionsManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRetailerInstructionsManager) EXPECT() *MockRetailerInstructionsManager_Expecter {
	return &MockRetailerInstructionsManager_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, instructions, auth0token
func (_m *MockRetailerInstructionsManager) Create(ctx context.Context, instructions *domain.RetailerConfiguration, auth0token string) error {
	ret := _m.Called(ctx, instructions, auth0token)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RetailerConfiguration, string) error); ok {
		r0 = rf(ctx, instructions, auth0token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRetailerInstructionsManager_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRetailerInstructionsManager_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - instructions *domain.RetailerConfiguration
//   - auth0token string
func (_e *MockRetailerInstructionsManager_Expecter) Create(ctx interface{}, instructions interface{}, auth0token interface{}) *MockRetailerInstructionsManager_Create_Call {
	return &MockRetailerInstructionsManager_Create_Call{Call: _e.mock.On("Create", ctx, instructions, auth0token)}
}

func (_c *MockRetailerInstructionsManager_Create_Call) Run(run func(ctx context.Context, instructions *domain.RetailerConfiguration, auth0token string)) *MockRetailerInstructionsManager_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.RetailerConfiguration), args[2].(string))
	})
	return _c
}

func (_c *MockRetailerInstructionsManager_Create_Call) Return(_a0 error) *MockRetailerInstructionsManager_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRetailerInstructionsManager_Create_Call) RunAndReturn(run func(context.Context, *domain.RetailerConfiguration, string) error) *MockRetailerInstructionsManager_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConfigurationsByRetailerID provides a mock function with given fields: ctx, retailerID, auth0token
func (_m *MockRetailerInstructionsManager) DeleteConfigurationsByRetailerID(ctx context.Context, retailerID uuid.UUID, auth0token string) error {
	ret := _m.Called(ctx, retailerID, auth0token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationsByRetailerID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, retailerID, auth0token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRetailerInstructionsManager_DeleteConfigurationsByRetailerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConfigurationsByRetailerID'
type MockRetailerInstructionsManager_DeleteConfigurationsByRetailerID_Call struct {
	*mock.Call
}

// DeleteConfigurationsByRetailerID is a helper method to define mock.On call
//   - ctx context.Context
//   - retailerID uuid.UUID
//   - auth0token string
func (_e *MockRetailerInstructionsManager_Expecter) DeleteConfigurationsByRetailerID(ctx interface{}, retailerID interface{}, auth0token interface{}) *MockRetailerInstructionsManager_DeleteConfigurationsByRetailerID_Call {
	return &MockRetailerInstructionsManager_DeleteConfigurationsByRetailerID_Call{Call: _e.mock.On("DeleteConfigurationsByRetailerID", ctx, retailerID, auth0token)}
}

func (_c *MockRetailerInstructionsManager_DeleteConfigurationsByRetailerID_Call) Run(run func(ctx context.Context, retailerID uuid.UUID, auth0token string)) *MockRetailerInstructionsManager_DeleteConfigurationsByRetailerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockRetailerInstructionsManager_DeleteConfigurationsByRetailerID_Call) Return(_a0 error) *MockRetailerInstructionsManager_DeleteConfigurationsByRetailerID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRetailerInstructionsManager_DeleteConfigurationsByRetailerID_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) error) *MockRetailerInstructionsManager_DeleteConfigurationsByRetailerID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRetailerInstructionsManager creates a new instance of MockRetailerInstructionsManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRetailerInstructionsManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRetailerInstructionsManager {
	mock := &MockRetailerInstructionsManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
